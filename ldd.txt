- device driver:
	- it should provide mechanism not a policy.
	- it is important to be policy free 
	- it is linked aginst the kernel and only the kernel code should be used
	- 

- classes of device and modules:
	- char deivce:
		- it is use the access in byte module
		- it should implememnt open, close, read, write.
	- block device:	
		- u access the data in block not in byte tact

- current process:
	- current mikro is used to get the tast_struct of the process which is active right now

- current module:
	- it has small stack 4096 byte

- make file:
	obj-m := module.o 
	module-objs := file1.o file2.o

- LKM parts:
	- __ init / __exit: it is used to put the code in section which can be reused again 
	- module_init() : it is mandatory to tell the kernel which function should be called when the module is loaded
	- 

- major and minor number:
	- char device are accessed through name from user space in the file system under /dev
	- char device has major number to represent the driver which handle the device 
	- char device has minor number to to decide which device is accessed from the driver, kernel knows nothing about the minor number
	- char device number is embedded in the dev_t data type
	- linux provides APIs to get the major and minor number from the device number, and to create the device number from the major and minor number 

- to register char device in the file system:
	- register_chrdev_region(dev_t first, unsigned int count, char* name)
	- alloc_chrdev_region(dev_t* dev, unsigend int firstMinor, unsigned int count, char* name)
		- they would create a device under proc/devices and sysfs with a major number 

- to create device in /dev:
	- mknod /dev/nameOfDevice c majorNumber minorNumber

- cdev:
	- it is a representation of char device in the kernel and it is embedded in the structure file
	- u have to initalize the structure and to inform the kernel about the structure
		- void cdev_init(struct cdev *cdev, struct file_operations *fops);
		- int cdev_add(struct cdev *dev, dev_t num, unsigned int count);
		- void cdev_del(struct cdev *dev);

- struct file:
	- every open file in the kernel would have struct file 
	- it is only in kernel space 
	- it has position,file_operation, private_data, c_dev to represent char device

- file_operation:
	- each device should implement basic operations:
	- struct file_operations fops = {.owner = THIS_MODULE,.llseek = scull_llseek,.read = scull_read,.write = scull_write,.ioctl = scull_ioctl,.open = scull_open,.release = scull_release, };

- open method:
	- int (*open)(struct inode *inode, struct file *filp);
	- from inode u can get cdev structure which u can use to know which device is opened and pass this information to file structure which is passed to read and write system call 

- release method:
	- int (*open)(struct inode *inode, struct file *filp);
	- release any resourcess which were ioccupied by the driver


- read / write:
	- return postive: then the read / write with successful
	- return 0: end of file
	- return -number: error
	- if no data is avaliable the code would block
	- 

- semaphores:
	- it is an integer value which has functions related to it: down / up
	- semaphore is used when it is allowed to sleep
	- to declare semaphores for mutual exclusion we use Mutex which is semaphore whith value of one
	- APIs:
		- void init_MUTEX(struct semaphore *sem);
		- void init_MUTEX_LOCKED(struct semaphore *sem);
		- void down(struct semaphore *sem);
		- int down_interruptible(struct semaphore *sem);
		- int down_trylock(struct semaphore *sem);
		- void up(struct semaphore *sem);

- spin_lock():
	- it is used when u are not allow to sleep
	- the code which would share with interrupt 
	- spinlock stay active means if u sleeps the other code wont be able to access the data and wont sleep 
	- spin_lock calls by default disable preemtion of the kernel but does not disable interrupt meaning u have to disable interrupt on the core which u are using to prevent dead lock we achieve it by using spin_lock_irq*
	- APIs:
		- void spin_lock_init(spinlock_t *lock);
		- void spin_lock(spinlock_t *lock);
		- void spin_lock_irqsave(spinlock_t *lock, unsigned long flags);
		- void spin_lock_irq(spinlock_t *lock);
		- void spin_lock_bh(spinlock_t *lock)
		- void spin_unlock(spinlock_t *lock);
		- void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags);
		- void spin_unlock_irq(spinlock_t *lock);
		- void spin_unlock_bh(spinlock_t *lock);

- sleep:
	- rules for sleep is that u are not allowed to sleep if u require spin_lock or u are in interrupt context
	- with mutex it is ok to sleep but should not have semaphore which would prevent the process which should wake u up
	- APIs:
		- wait_queue_head_t my_queue;
		- init_waitqueue_head(&my_queue);
		- wait_event(queue, condition)
		- wait_event_interruptible(queue, condition)
		- wait_event_timeout(queue, condition, timeout)
		- wait_event_interruptible_timeout(queue, condition, timeout)

- timer:
	- jiffies is a counter which is incremented by the linux by HZ in a second 
	- it is set to Zero which the system start up
	- each timer interrupt the value of Jiffies is incremented by 1
	- 

- Linux device model:
	- it is impelement in a way to enable OOP in C language 
	- it provides features such as Reference counting, sysfs, and device class 
	- kobject: 
		- rules:
			- reference counting, sysfs representation, data glue
		- it has no benefits as stand alone it should embedded in another object
		- it has a parent element which points to the next kobject in the hierachy

	- kobj_type:
		- it is a way to represent the kobject. it gather the kobject by the type and provide common functionality such as release, sysfs_ops, attribute

	- ksets:
		- it is a way to aggregate kobjects which are embedded in the same data type in a set 
		- objects of identical type can appear in distinct sets
		- kset is alway represented in sysfs
		- every kobject which is a member of kset would appear in sysfs

	- bus:
		- it is channel between the CPU and one or more deivces
		- it has two kset, devices and drivers which is handle by the bus 
		- it has match meachnism which would be called every time a driver or device is added to the bus  
		- 
- serial communication:
	- 

- platform devices:
	- it refers to any deivce which sets on bus which is not known to the kernel
	- everything should be done manually when we deal with platform device, that is not the case when we deal with I2C device as the kernel provide helper function to deal with conventioal deivces
	- u have to register the driver useing platform_driver_register() or platform_driver_probe() 
	- to deal with platform:
		- register device as platform deivce
		- register driver as platform driver to handle this device 
		- to get the resources we have to call platform_get_resource() and tell which reosurce type and the index of this resourcess in the array
	- resourcess:
		- represents all the elements fromt the hardware point of view : IO, MEM, REG; IRQ, DMA, BUS
		- it should be given to the device as array of resuources
		- code:
			- struct resource { resource_size_t start; resource_size_t end; const char *name; unsigned long flags; };

- device_tree:
	- each device is giving at least one node on the device tree

	- properities:
		- reg: address size tuple
			- ex: reg< address1 size1 address2 size2 address3 size3 >
		- #size cell:
			- to tell how many cells are needed to represent the size of the device in the childern nodes
		- #address cell:
			- to tell how many cells are needed to represent a address in the childern nodes

	- naming convention of tags:
		- tag: name@address to name a node 
	
	- nameing conventation of resources:
		- interrupts = <0 66 IRQ_TYPE_LEVEL_HIGH>, <0 67 IRQ_TYPE_LEVEL_HIGH>;
		- interrupt-names = "ohci", "ehci";
		- platform_get_resource_byname()
	
	- interrupt:
		- interrupt is divided to controller side and consumer side
		- controller side:
			- should have: 
				- interrupt-controller as Boolean
				- #interrupt-cells: show how many cells are needed to represent an interrupt

		- comsumer side:
			- interrupt parent: phandle to the interrupt controller
			- interrupts: interrupt data

		- to get the irq number from the code
			- platform_get_irq() would return the irq number

- memory space:
	- each process is represented by struct task_struct
	-

- I2C:
	- driver:
		- it is declared as instance of struct i2c_driver
		- probe function: 
			- static int foo_probe(struct i2c_client *client, const struct i2c_device_id *id)
				- Check whether the device is the one you expected
				- Check whether your I2C bus controller of the SoC supports the functionality
				- needed by your device, using the i2c_check_functionality function
				- Initialize the device
				- set up device-specific data
				- Register the appropriate kernel framework
		- i2c_device_id:
			- it must be embedded in the driver to show which devices the drivers support when the match happens the speicifc id would be passed to the probe function

	- client:
		- it is represent by struct i2c_client

- pinctrl subsystem:
	- it provides two controller over the pin
		- pin muxing: UART, SPI, etc
		- pin configuration: pull up, pull down
	- it gather the Pins and pass them to the driver
	- u gather the function un iomux controller, and u use this function by name and index method
	- ex:
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_usdhc4_1>;

- GPIO subsystem:
	- u can set the direction of the GPIO
	- Toggle its output state


- OF:
	- OF matching:
		- platform/i2c/spi_device_id: 
		- it is where u define the name of the devices which u can support 
		- the .name should be the same as device name



APIs:
	- container of macro:
		- u can use this macro to find the container of the pointer 
		- code:
			- container_of(pointer, container_type, container_field):

	- linked lists:
		- it is used in every element and in the head element 
		- code:
			- struct list_head { struct list_head *next, *prev;};